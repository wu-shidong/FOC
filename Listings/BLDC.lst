C251 COMPILER V5.60.0,  BLDC                                                               29/06/23  12:31:39  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE BLDC
OBJECT MODULE PLACED IN .\Objects\BLDC.obj
COMPILER INVOKED BY: D:\Keil_v5\C251\BIN\C251.EXE Application\BLDC.c LARGE INTR2 BROWSE INCDIR(.\Application;.\Bsp;.\Com
                    -ponenets;.\Lib) DEBUG PRINT(.\Listings\BLDC.lst) TABS(2) OBJECT(.\Objects\BLDC.obj) 

stmt  level    source

    1          #include "BLDC.h"
    2          #include <MATH.H>
    3          #include <stdio.h>
    4          #include "user_pid.h"
    5          #include "bsp_pwm.h"
*** WARNING C317 IN LINE 40 OF type_def.h: attempt to redefine macro 'NULL'
    6          //³õÊ¼±äÁ¿¼°º¯Êý¶¨Òå
    7          //ºê¶¨ÒåÊµÏÖµÄÒ»¸öÔ¼Êøº¯Êý,ÓÃÓÚÏÞÖÆÒ»¸öÖµµÄ·¶Î§¡£
    8          //¾ßÌåÀ´Ëµ£¬¸Ãºê¶¨ÒåµÄÃû³ÆÎª _constrain£¬½ÓÊÜÈý¸ö²ÎÊý amt¡¢low ºÍ high£¬·Ö±ð±íÊ¾ÒªÏÞÖÆµÄÖµ¡¢×îÐ¡ÖµºÍ×î´óÖ
             -µ¡£¸Ãºê¶¨ÒåµÄÊµÏÖÊ¹ÓÃÁËÈýÔªÔËËã·û£¬¸ù¾Ý amt ÊÇ·ñÐ¡ÓÚ low »ò´óÓÚ high£¬·µ»ØÆäÖÐµÄ×î´ó»ò×îÐ¡Öµ£¬»òÕß·µ»ØÔ­Öµ¡£
    9          #define _constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))
   10          #define PI 3.14159f
   11          u16 Ts;
   12          BLDC bldc_oplp;//¿ª»·¿ØÖÆ
   13          
   14          void bldc_openloop_init(BLDC *bldc_init,float voltage_power_supply,float pole_pairs)
   15          {
   16   1        //ÊäÈëµçÔ´µçÑ¹
   17   1        bldc_init->voltage_power_supply=voltage_power_supply;
   18   1      
   19   1        //µç»ú¼«¶ÔÊý
   20   1        bldc_init->pole_pairs=pole_pairs;
   21   1      
   22   1        //Î»²î½ÇÎª0
   23   1        bldc_init->shaft_angle=0;
   24   1        // Ê¹ÓÃÔçÇ°ÉèÖÃµÄvoltage_power_supplyµÄ1/3×÷ÎªUqÖµ£¬Õâ¸öÖµ»áÖ±½ÓÓ°ÏìÊä³öÁ¦¾Ø
   25   1        // ×î´óÖ»ÄÜÉèÖÃÎªUq = voltage_power_supply/2£¬·ñÔòua,ub,uc»á³¬³ö¹©µçµçÑ¹ÏÞ·ù
   26   1        bldc_init->Uq = bldc_init->voltage_power_supply/5;
   27   1      }
   28          
   29          
   30          
   31          
   32          // ¹éÒ»»¯½Ç¶Èµ½ [0,2PI]
   33          float _normalizeAngle(float angle){
   34   1         
   35   1        float a = fmod(angle, 2*PI);//È¡ÓàÔËËã¿ÉÒÔÓÃÓÚ¹éÒ»»¯£¬ÁÐ³öÌØÊâÖµÀý×ÓËã±ãÖª
   36   1        return a >= 0 ? a : (a + 2*PI);  //ÈýÄ¿ÔËËã·û¡£¸ñÊ½£ºcondition ? expr1 : expr2 
   37   1        
   38   1        //fmod º¯ÊýµÄÓàÊýµÄ·ûºÅÓë³ýÊýÏàÍ¬¡£Òò´Ë£¬µ± angle µÄÖµÎª¸ºÊýÊ±£¬ÓàÊýµÄ·ûºÅ½«Óë _2PI µÄ·ûºÅÏà·´¡£Ò²¾ÍÊÇË
             -µ£¬Èç¹û angle µÄÖµÐ¡ÓÚ 0 ÇÒ _2PI µÄÖµÎªÕýÊý£¬Ôò fmod(angle, _2PI) µÄÓàÊý½«Îª¸ºÊý¡£
   39   1        //ÀýÈç£¬µ± angle µÄÖµÎª -PI/2£¬_2PI µÄÖµÎª 2PI Ê±£¬fmod(angle, _2PI) ½«·µ»ØÒ»¸ö¸ºÊý¡£ÔÚÕâÖÖÇé¿öÏÂ£¬¿ÉÒÔ
             -Í¨¹ý½«¸ºÊýµÄÓàÊý¼ÓÉÏ _2PI À´½«½Ç¶È¹éÒ»»¯µ½ [0, 2PI] µÄ·¶Î§ÄÚ£¬ÒÔÈ·±£½Ç¶ÈµÄÖµÊ¼ÖÕÎªÕýÊý¡£
   40   1      }
   41          
   42          
   43          
   44          
   45          void velocityOpenloop(BLDC *bldc_set)
   46          {
   47   1        bldc_set->target_velocity=10;
   48   1        TR0 = 0;
   49   1        Ts=(TH0<<8)|TL0;
   50   1        TH0 = 0;
   51   1        TL0 = 0;
   52   1        TR0 = 1;
   53   1        // Í¨¹ý³ËÒÔÊ±¼ä¼ä¸ôºÍÄ¿±êËÙ¶ÈÀ´¼ÆËãÐèÒª×ª¶¯µÄ»úÐµ½Ç¶È£¬´æ´¢ÔÚ shaft_angle ±äÁ¿ÖÐ¡£ÔÚ´ËÖ®Ç°£¬»¹ÐèÒª¶ÔÖá½
             -Ç¶È½øÐÐ¹éÒ»»¯£¬ÒÔÈ·±£ÆäÖµÔÚ 0 µ½ 2¦Ð Ö®¼ä¡£ 
C251 COMPILER V5.60.0,  BLDC                                                               29/06/23  12:31:39  PAGE 2   

   54   1        //ÒÔÄ¿±êËÙ¶ÈÎª 10 rad/s ÎªÀý£¬Èç¹ûÊ±¼ä¼ä¸ôÊÇ 1 Ãë£¬ÔòÔÚÃ¿¸öÑ­»·ÖÐÐèÒªÔö¼Ó 10 * 1 = 10 »¡¶ÈµÄ½Ç¶È±ä»¯Á¿£¬
             -²ÅÄÜÊ¹µç»ú×ª¶¯µ½Ä¿±êËÙ¶È¡£
   55   1        //Èç¹ûÊ±¼ä¼ä¸ôÊÇ 0.1 Ãë£¬ÄÇÃ´ÔÚÃ¿¸öÑ­»·ÖÐÐèÒªÔö¼ÓµÄ½Ç¶È±ä»¯Á¿¾ÍÊÇ 10 * 0.1 = 1 »¡¶È£¬²ÅÄÜÊµÏÖÏàÍ¬µÄÄ¿±ê
             -ËÙ¶È¡£Òò´Ë£¬µç»úÖáµÄ×ª¶¯½Ç¶ÈÈ¡¾öÓÚÄ¿±êËÙ¶ÈºÍÊ±¼ä¼ä¸ôµÄ³Ë»ý¡£
   56   1      //  bldc_set->shaft_angle = _normalizeAngle(bldc_set->shaft_angle + bldc_set->target_velocity*bldc_set->o
             -plp_timestamp);
   57   1        bldc_set->shaft_angle = _normalizeAngle(bldc_set->shaft_angle + bldc_set->target_velocity*Ts/35*12*1e-6f
             -);
   58   1        //¼ÆËãµç½Ç¶È
   59   1        bldc_set->angle_elec=bldc_set->shaft_angle*bldc_set->pole_pairs;
   60   1        //µç½Ç¶È¹éÒ»»¯
   61   1        bldc_set->angle_elec = _normalizeAngle(bldc_set->angle_elec + bldc_set->zero_electric_angle);
   62   1        // ÅÁ¿ËÄæ±ä»»
   63   1        bldc_set->Ualpha =  -bldc_set->Uq*sin(bldc_set->angle_elec); 
   64   1        bldc_set->Ubeta =   bldc_set->Uq*cos(bldc_set->angle_elec); 
   65   1        // ¿ËÀ­¿ËÄæ±ä»»
   66   1        bldc_set->Ua = bldc_set->Ualpha + bldc_set->voltage_power_supply/2;
   67   1        bldc_set->Ub = (sqrt(3)*bldc_set->Ubeta-bldc_set->Ualpha)/2 + bldc_set->voltage_power_supply/2;
   68   1        bldc_set->Uc = (-bldc_set->Ualpha-sqrt(3)*bldc_set->Ubeta)/2 + bldc_set->voltage_power_supply/2;
   69   1        //ÉèÖÃ¸÷ÏàµÄÕ¼¿Õ±È
   70   1        bldc_set->dc_a = _constrain(bldc_set->Ua / bldc_set->voltage_power_supply, 0.0f , 1.0f );
   71   1        bldc_set->dc_b = _constrain(bldc_set->Ub / bldc_set->voltage_power_supply, 0.0f , 1.0f );
   72   1        bldc_set->dc_c = _constrain(bldc_set->Uc / bldc_set->voltage_power_supply, 0.0f , 1.0f );
   73   1        PWMA_Duty.PWM1_Duty=(u16)(bldc_set->dc_a*2047);
   74   1        PWMA_Duty.PWM2_Duty=(u16)(bldc_set->dc_b*2047);
   75   1        PWMA_Duty.PWM3_Duty=(u16)(bldc_set->dc_c*2047);
   76   1        UpdatePwm(PWMA, &PWMA_Duty);
   77   1      
   78   1      }
   79          
   80          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       840     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =        65          4
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
