C251 COMPILER V5.60.0,  STC32G_I2C                                                         03/07/23  06:55:20  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE STC32G_I2C
OBJECT MODULE PLACED IN .\Objects\STC32G_I2C.obj
COMPILER INVOKED BY: D:\Keil_v5\C251\BIN\C251.EXE Lib\STC32G_I2C.c LARGE INTR2 BROWSE INCDIR(.\Application;.\Bsp;.\Compo
                    -nenets;.\Lib;.\Devices) DEBUG PRINT(.\Listings\STC32G_I2C.lst) TABS(2) OBJECT(.\Objects\STC32G_I2C.obj) 

stmt  level    source

    1          /*---------------------------------------------------------------------*/
    2          /* --- STC MCU Limited ------------------------------------------------*/
    3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
    4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
    5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
    6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
    7          /* --- Web: www.STCAI.com ---------------------------------------------*/
    8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
    9          /* --- BBS: www.STCAIMCU.com  -----------------------------------------*/
   10          /* --- QQ:  800003751 -------------------------------------------------*/
   11          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
   12          /*---------------------------------------------------------------------*/
   13          
   14          #include  "STC32G_I2C.h"
   15          
   16          u8 I2C_BUF_type I2C_Buffer[I2C_BUF_LENTH];
   17          
   18          #define SLAW    0xA2
   19          #define SLAR    0xA3
   20          
   21          //========================================================================
   22          // 函数: void I2C_Init(I2C_InitTypeDef *I2Cx)
   23          // 描述: I2C初始化程序.
   24          // 参数: I2Cx: 结构参数,请参考I2C.h里的定义.
   25          // 返回: none.
   26          // 版本: V1.0, 2012-11-22
   27          //========================================================================
   28          void I2C_Init(I2C_InitTypeDef *I2Cx)
   29          {
   30   1        if(I2Cx->I2C_Mode == I2C_Mode_Master)
   31   1        {
   32   2          I2C_Master();     //设为主机  
   33   2          I2CMSST = 0x00;   //清除I2C主机状态寄存器
   34   2          I2C_SetSpeed(I2Cx->I2C_Speed);
   35   2          if(I2Cx->I2C_MS_WDTA == ENABLE)   I2C_WDTA_EN();  //使能自动发送
   36   2          else                  I2C_WDTA_DIS(); //禁止自动发送
   37   2        }
   38   1        else
   39   1        {
   40   2          I2C_Slave();  //设为从机
   41   2          I2CSLST = 0x00;   //清除I2C从机状态寄存器
   42   2          I2C_Address(I2Cx->I2C_SL_ADR);
   43   2          if(I2Cx->I2C_SL_MA == ENABLE)   I2C_MATCH_EN(); //从机地址比较功能，只接受相匹配地址
   44   2          else                  I2C_MATCH_DIS();  //禁止从机地址比较功能，接受所有设备地址
   45   2        }
   46   1        
   47   1        I2C_Function(I2Cx->I2C_Enable);
   48   1      }
   49          
   50          //========================================================================
   51          // 函数: u8 Get_MSBusy_Status (void)
   52          // 描述: 获取主机忙碌状态.
   53          // 参数: none.
   54          // 返回: 主机忙碌状态.
   55          // 版本: V1.0, 2012-11-22
   56          //========================================================================
   57          u8 Get_MSBusy_Status(void)
   58          {
C251 COMPILER V5.60.0,  STC32G_I2C                                                         03/07/23  06:55:20  PAGE 2   

   59   1        return (I2CMSST & 0x80);
   60   1      }
   61          
   62          //========================================================================
   63          // 函数: void Wait (void)
   64          // 描述: 等待主机模式I2C控制器执行完成I2CMSCR.
   65          // 参数: none.
   66          // 返回: none.
   67          // 版本: V1.0, 2012-11-22
   68          //========================================================================
   69          void Wait()
   70          {
   71   1        while (!(I2CMSST & 0x40));
   72   1        I2CMSST &= ~0x40;
   73   1      }
   74          
   75          //========================================================================
   76          // 函数: void Start (void)
   77          // 描述: I2C总线起始函数.
   78          // 参数: none.
   79          // 返回: none.
   80          // 版本: V1.0, 2020-09-15
   81          //========================================================================
   82          void Start()
   83          {
   84   1        I2CMSCR = 0x01;                         //发送START命令
   85   1        Wait();
   86   1      }
   87          
   88          //========================================================================
   89          // 函数: void SendData (char dat)
   90          // 描述: I2C发送一个字节数据函数.
   91          // 参数: 发送的数据.
   92          // 返回: none.
   93          // 版本: V1.0, 2020-09-15
   94          //========================================================================
   95          void SendData(char dat)
   96          {
   97   1        I2CTXD = dat;                           //写数据到数据缓冲区
   98   1        I2CMSCR = 0x02;                         //发送SEND命令
   99   1        Wait();
  100   1      }
  101          
  102          //========================================================================
  103          // 函数: void RecvACK (void)
  104          // 描述: I2C获取ACK函数.
  105          // 参数: none.
  106          // 返回: none.
  107          // 版本: V1.0, 2020-09-15
  108          //========================================================================
  109          void RecvACK()
  110          {
  111   1        I2CMSCR = 0x03;                         //发送读ACK命令
  112   1        Wait();
  113   1      }
  114          
  115          //========================================================================
  116          // 函数: char RecvData (void)
  117          // 描述: I2C读取一个字节数据函数.
  118          // 参数: none.
  119          // 返回: 读取数据.
  120          // 版本: V1.0, 2020-09-15
  121          //========================================================================
  122          char RecvData()
  123          {
  124   1        I2CMSCR = 0x04;                         //发送RECV命令
C251 COMPILER V5.60.0,  STC32G_I2C                                                         03/07/23  06:55:20  PAGE 3   

  125   1        Wait();
  126   1        return I2CRXD;
  127   1      }
  128          
  129          //========================================================================
  130          // 函数: void SendACK (void)
  131          // 描述: I2C发送ACK函数.
  132          // 参数: none.
  133          // 返回: none.
  134          // 版本: V1.0, 2020-09-15
  135          //========================================================================
  136          void SendACK()
  137          {
  138   1        I2CMSST = 0x00;                         //设置ACK信号
  139   1        I2CMSCR = 0x05;                         //发送ACK命令
  140   1        Wait();
  141   1      }
  142          
  143          //========================================================================
  144          // 函数: void SendNAK (void)
  145          // 描述: I2C发送NAK函数.
  146          // 参数: none.
  147          // 返回: none.
  148          // 版本: V1.0, 2020-09-15
  149          //========================================================================
  150          void SendNAK()
  151          {
  152   1        I2CMSST = 0x01;                         //设置NAK信号
  153   1        I2CMSCR = 0x05;                         //发送ACK命令
  154   1        Wait();
  155   1      }
  156          
  157          //========================================================================
  158          // 函数: void Stop (void)
  159          // 描述: I2C总线停止函数.
  160          // 参数: none.
  161          // 返回: none.
  162          // 版本: V1.0, 2020-09-15
  163          //========================================================================
  164          void Stop()
  165          {
  166   1        I2CMSCR = 0x06;                         //发送STOP命令
  167   1        Wait();
  168   1      }
  169          
  170          //========================================================================
  171          // 函数: void SendCmdData (u8 cmd, u8 dat)
  172          // 描述: I2C发送一个字节数据函数.
  173          // 参数: 命令/数据.
  174          // 返回: none.
  175          // 版本: V1.0, 2020-09-15
  176          //========================================================================
  177          void SendCmdData(u8 cmd, u8 dat)
  178          {
  179   1        I2CTXD = dat;                           //写数据到数据缓冲区
  180   1        I2CMSCR = cmd;                          //设置命令
  181   1        Wait();
  182   1      }
  183          
  184          //========================================================================
  185          // 函数: void I2C_WriteNbyte(u8 dev_addr, u8 mem_addr, u8 *p, u8 number)
  186          // 描述: I2C写入数据函数.
  187          // 参数: dev_addr: 设备地址, mem_addr: 存储地址, *p写入数据存储位置, number写入数据个数.
  188          // 返回: none.
  189          // 版本: V1.0, 2020-09-15
  190          //========================================================================
C251 COMPILER V5.60.0,  STC32G_I2C                                                         03/07/23  06:55:20  PAGE 4   

  191          void I2C_WriteNbyte(u8 dev_addr, u8 mem_addr, u8 *p, u8 number)  /*  DeviceAddress,WordAddress,First Data
             - Address,Byte lenth   */
  192          {
  193   1        Start();                                //发送起始命令
  194   1        SendData(dev_addr);                     //发送设备地址+写命令
  195   1        RecvACK();
  196   1        SendData(mem_addr);                     //发送存储地址
  197   1        RecvACK();
  198   1        do
  199   1        {
  200   2          SendData(*p++);
  201   2          RecvACK();
  202   2        }
  203   1        while(--number);
  204   1        Stop();                                 //发送停止命令
  205   1      }
  206          
  207          //========================================================================
  208          // 函数: void I2C_ReadNbyte(u8 dev_addr, u8 mem_addr, u8 *p, u8 number)
  209          // 描述: I2C读取数据函数.
  210          // 参数: dev_addr: 设备地址, mem_addr: 存储地址, *p读取数据存储位置, number读取数据个数.
  211          // 返回: none.
  212          // 版本: V1.0, 2020-09-15
  213          //========================================================================
  214          void I2C_ReadNbyte(u8 dev_addr, u8 mem_addr, u8 *p, u8 number)   /*  DeviceAddress,WordAddress,First Data
             - Address,Byte lenth   */
  215          {
  216   1        Start();                                //发送起始命令
  217   1        SendData(dev_addr);                     //发送设备地址+写命令
  218   1        RecvACK();
  219   1        SendData(mem_addr);                     //发送存储地址
  220   1        RecvACK();
  221   1        Start();                                //发送起始命令
  222   1        SendData(dev_addr|1);                   //发送设备地址+读命令
  223   1        RecvACK();
  224   1        do
  225   1        {
  226   2          *p = RecvData();
  227   2          p++;
  228   2          if(number != 1) SendACK();          //send ACK
  229   2        }
  230   1        while(--number);
  231   1        SendNAK();                              //send no ACK 
  232   1        Stop();                                 //发送停止命令
  233   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       557     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------          6
  xdata-const size     =    ------     ------
  edata size           =         8     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
