C251 COMPILER V5.60.0,  user_pid                                                           03/07/23  06:55:17  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE user_pid
OBJECT MODULE PLACED IN .\Objects\user_pid.obj
COMPILER INVOKED BY: D:\Keil_v5\C251\BIN\C251.EXE Componenets\user_pid.c LARGE INTR2 BROWSE INCDIR(.\Application;.\Bsp;.
                    -\Componenets;.\Lib;.\Devices) DEBUG PRINT(.\Listings\user_pid.lst) TABS(2) OBJECT(.\Objects\user_pid.obj) 

stmt  level    source

    1          /**
    2            ****************************************************************************
    3            * @file       pid.c/h
    4            * @brief      pid实现函数，包括初始化，PID计算函数，
    5            * @note       
    6            * @history
    7            *  Version    Date            Author          Modification
    8            *  V1.0.0     Dec-26-2022     吴世栋              完成
    9            *
   10            @verbatim
   11            ==============================================================================
   12          
   13            ==============================================================================
   14            @endverbatim
   15            ****************************************************************************
   16            */
   17          
   18          #include "user_pid.h"
   19          
   20          
   21          #define LimitMax(input, max)   \
   22              {                          \
   23                  if (input > max)       \
   24                  {                      \
   25                      input = max;       \
   26                  }                      \
   27                  else if (input < -max) \
   28                  {                      \
   29                      input = -max;      \
   30                  }                      \
   31              }
   32          
   33          /**
   34            * @brief          pid struct data init
   35            * @param[out]     pid: PID struct data point
   36            * @param[in]      mode: PID_POSITION: normal pid
   37            *                 PID_DELTA: delta pid
   38            * @param[in]      PID: 0: kp, 1: ki, 2:kd
   39            * @param[in]      max_out: pid max out
   40            * @param[in]      max_iout: pid max iout
   41            * @retval         none
   42            */
   43          /**
   44            * @brief          pid struct data init
   45            * @param[out]     pid: PID结构数据指针
   46            * @param[in]      mode: PID_POSITION:普通PID
   47            *                 PID_DELTA: 差分PID
   48            * @param[in]      PID: 0: kp, 1: ki, 2:kd
   49            * @param[in]      max_out: pid最大输出
   50            * @param[in]      max_iout: pid最大积分输出
   51            * @retval         none
   52            */
   53          void PID_init(pid_type_def *pid, u8 mode, fp32 PID[3], fp32 max_out, fp32 max_iout)
   54          {
   55   1      
   56   1          pid->mode = mode;
   57   1          pid->Kp = PID[0];
   58   1          pid->Ki = PID[1];
C251 COMPILER V5.60.0,  user_pid                                                           03/07/23  06:55:17  PAGE 2   

   59   1          pid->Kd = PID[2];
   60   1          pid->max_out = max_out;
   61   1          pid->max_iout = max_iout;
   62   1          pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
   63   1          pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
   64   1      }
   65          
   66          /**
   67            * @brief          pid calculate 
   68            * @param[out]     pid: PID struct data point
   69            * @param[in]      ref: feedback data 
   70            * @param[in]      set: set point
   71            * @retval         pid out
   72            */
   73          /**
   74            * @brief          pid计算
   75            * @param[out]     pid: PID结构数据指针
   76            * @param[in]      ref: 反馈数据
   77            * @param[in]      set: 设定值
   78            * @retval         pid输出
   79            */
   80          fp32 PID_calc(pid_type_def *pid, fp32 ref, fp32 set)
   81          {
   82   1          if (pid == NULL)
   83   1          {
   84   2              return 0.0f;
   85   2          }
   86   1      
   87   1          pid->error[2] = pid->error[1];
   88   1          pid->error[1] = pid->error[0];
   89   1          pid->set = set;
   90   1          pid->fdb = ref;
   91   1          pid->error[0] = set - ref;
   92   1          if (pid->mode == PID_POSITION)
   93   1          {
   94   2              pid->Pout = pid->Kp * pid->error[0];
   95   2              pid->Iout += pid->Ki * pid->error[0];
   96   2              pid->Dbuf[2] = pid->Dbuf[1];
   97   2              pid->Dbuf[1] = pid->Dbuf[0];
   98   2              pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
   99   2              pid->Dout = pid->Kd * pid->Dbuf[0];
  100   2              LimitMax(pid->Iout, pid->max_iout);
  101   2              pid->out = pid->Pout + pid->Iout + pid->Dout;
  102   2              LimitMax(pid->out, pid->max_out);
  103   2          }
  104   1          else if (pid->mode == PID_DELTA)
  105   1          {
  106   2              pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
  107   2              pid->Iout = pid->Ki * pid->error[0];
  108   2              pid->Dbuf[2] = pid->Dbuf[1];
  109   2              pid->Dbuf[1] = pid->Dbuf[0];
  110   2              pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
  111   2              pid->Dout = pid->Kd * pid->Dbuf[0];
  112   2              pid->out += pid->Pout + pid->Iout + pid->Dout;
  113   2              LimitMax(pid->out, pid->max_out);
  114   2          }
  115   1          return pid->out;
  116   1      }
  117          
  118          /**
  119            * @brief          pid out clear
  120            * @param[out]     pid: PID struct data point
  121            * @retval         none
  122            */
  123          /**
  124            * @brief          pid 输出清除
C251 COMPILER V5.60.0,  user_pid                                                           03/07/23  06:55:17  PAGE 3   

  125            * @param[out]     pid: PID结构数据指针
  126            * @retval         none
  127            */
  128          void PID_clear(pid_type_def *pid)
  129          {
  130   1          if (pid == NULL)
  131   1          {
  132   2              return;
  133   2          }
  134   1      
  135   1          pid->error[0] = pid->error[1] = pid->error[2] = 0.0f;
  136   1          pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
  137   1          pid->out = pid->Pout = pid->Iout = pid->Dout = 0.0f;
  138   1          pid->fdb = pid->set = 0.0f;
  139   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       972     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------         12
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
